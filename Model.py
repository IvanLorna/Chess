# -*- coding: utf-8 -*-
"""Models.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zq27h9ijUbICTVqKwWTALi9izJkrCEDC
"""
import tensorflow as tf
from tensorflow.keras import models, layers
import os

def TrainModels(trainX, trainY, isWhite = True):
  Models = []
  model = models.Sequential([
        layers.Dense(14,activation='sigmoid',input_shape=(8,8,14)),
        layers.Dense(10,activation='sigmoid'),
        layers.Dense(7,activation='sigmoid'),
        layers.ZeroPadding2D(padding=(1,1)),
        layers.Conv2D(28,(2,2),activation='relu'),
        layers.Conv2D(64,(4,4),activation='relu'),
        layers.Conv2D(64,(3,3),strides=(2,2),activation='relu'),
        layers.Flatten(),
        layers.Dense(128,activation='softmax'),
        layers.Reshape((1,128))
  ])
  print("Training Model 1:")
  model.compile(optimizer='adam',
              loss = tf.keras.losses.MeanSquaredError(),
              metrics=['accuracy'])

  history = model.fit(trainX, trainY, epochs = 10)
  Models.append(model)
  model = models.Sequential([
        layers.Dense(128,activation='sigmoid',input_shape=(8,8,14)),
        layers.Conv2D(64,(4,4),activation='relu'),
        layers.AveragePooling2D((2,2)),
        layers.Dense(128,activation='softmax'),
        layers.AveragePooling2D((2,2)),
        layers.Reshape((1,128))
  ])
  print("Training Model 2:")
  model.compile(optimizer='adam',
              loss = tf.keras.losses.MeanSquaredError(),
              metrics=['accuracy'])

  history = model.fit(trainX, trainY, epochs = 10)
  Models.append(model)

  model = models.Sequential([
        layers.Dense(128,activation='sigmoid',input_shape=(8,8,14)),
        layers.Dense(8,activation='sigmoid'),
        layers.Dense(8,activation='sigmoid'),
        layers.Dense(8,activation='sigmoid'),
        layers.Dense(8,activation='sigmoid'),
        layers.Conv2D(8,(3,3),activation='relu'),
        layers.Conv2D(8,(3,3),activation='relu'),
        layers.Reshape((1,128))
  ])
  print("Training Model 3:")
  model.compile(optimizer='adam',
              loss = tf.keras.losses.MeanSquaredError(),
              metrics=['accuracy'])

  history = model.fit(trainX, trainY, epochs = 10)
  Models.append(model)

  model = models.Sequential([
        layers.Conv2D(8,(4,4),activation='tanh',input_shape=(8,8,14)),
        layers.Conv2D(16,(3,3),activation='tanh'),
        layers.Conv2D(32,(2,2),activation='tanh'),
        layers.Dense(128,activation='relu'),
        layers.Dense(64,activation='relu'),
        layers.Dense(32,activation='relu'),
        layers.Dense(32,activation='softmax'),
        layers.Reshape((1,128))
  ])
  print("Training Model 4:")
  model.compile(optimizer='adam',
              loss = tf.keras.losses.MeanSquaredError(),
              metrics=['accuracy'])

  history = model.fit(trainX, trainY, epochs = 10)
  Models.append(model) 

  model = models.Sequential([
        layers.Conv2D(8,(4,4),activation='tanh',input_shape=(8,8,14)),
        layers.Dense(128,activation='relu'),
        layers.Conv2D(16,(3,3),activation='tanh'),
        layers.Dense(128,activation='relu'),
        layers.Conv2D(32,(2,2),activation='tanh'),
        layers.Dense(128,activation='relu'),
        layers.Dense(32,activation='softmax'),
        layers.Reshape((1,128))
  ])
  print("Training Model 5:")
  model.compile(optimizer='adam',
              loss = tf.keras.losses.MeanSquaredError(),
              metrics=['accuracy'])

  history = model.fit(trainX, trainY, epochs = 10)
  Models.append(model) 

  model = models.Sequential([
        layers.ZeroPadding2D(padding=(1,1),input_shape=(8,8,14)),
        layers.Conv2D(32,(3,3), strides =(1,1), activation='tanh'),
        layers.ZeroPadding2D(padding=(1,1)),
        layers.AveragePooling2D((2,2)),
        layers.ZeroPadding2D(padding=(1,1)),
        layers.Conv2D(64,(3,3),activation='tanh'),
        layers.ZeroPadding2D(padding=(1,1)),
        layers.AveragePooling2D((2,2)),
        layers.ZeroPadding2D(padding=(1,1)),
        layers.Conv2D(64,(3,3),activation='tanh'),
        layers.Flatten(),
        layers.Dense(128,activation='softmax'),
        layers.Reshape((1,128))
  ])
  print("Training Model 6:")
  model.compile(optimizer='adam',
              loss = tf.keras.losses.MeanSquaredError(),
              metrics=['accuracy'])

  history = model.fit(trainX, trainY, epochs = 20)
  Models.append(model) 

  print("Training Model 7:")
  model.compile(optimizer='adam',
              loss = tf.keras.losses.SquaredHinge(),
              metrics=['accuracy'])

  history = model.fit(trainX, trainY, epochs = 20)
  Models.append(model) 

  print("Training Model 8:")
  model.compile(optimizer='RMSprop',
              loss = tf.keras.losses.SquaredHinge(),
              metrics=['accuracy'])

  history = model.fit(trainX, trainY, epochs = 20)
  Models.append(model) 

  model = models.Sequential([
        layers.ZeroPadding2D(padding=(1,1),input_shape=(8,8,14)),
        layers.Conv2D(32,(3,3), strides =(1,1), activation='selu'),
        layers.ZeroPadding2D(padding=(1,1)),
        layers.AveragePooling2D((2,2)),
        layers.ZeroPadding2D(padding=(1,1)),
        layers.Conv2D(64,(3,3),activation='selu'),
        layers.ZeroPadding2D(padding=(1,1)),
        layers.AveragePooling2D((2,2)),
        layers.ZeroPadding2D(padding=(1,1)),
        layers.Conv2D(64,(3,3),activation='selu'),
        layers.Flatten(),
        layers.Dense(128,activation='softmax'),
        layers.Reshape((1,128))
  ])
  print("Training Model 9:")
  model.compile(optimizer='adam',
              loss = tf.keras.losses.Poisson(),
              metrics=['accuracy'])

  history = model.fit(trainX, trainY, epochs = 20)
  Models.append(model)   

  print("Training Model 10:")
  model.compile(optimizer='RMSprop',
              loss = tf.keras.losses.SquaredHinge(),
              metrics=['accuracy'])

  history = model.fit(trainX, trainY, epochs = 20)
  Models.append(model)

  model = models.Sequential([
        layers.ZeroPadding2D(padding=(1,1), input_shape=(8, 8, 14)),
        layers.Conv2D(32, (3, 3), strides = (1,1), activation='relu'),
        layers.ZeroPadding2D(padding=(1,1)),
        layers.AveragePooling2D((2, 2)),
        layers.ZeroPadding2D(padding=(1,1)),
        layers.Conv2D(64, (3, 3), activation='relu'),
        layers.Flatten(),
        layers.Dense(128,activation='softmax'),
        layers.Reshape((1,128))
  ])

  print("Training Model 11:")
  model.compile(optimizer='adam',
              loss = tf.keras.losses.MeanSquaredError(),
              metrics=['accuracy'])

  
  history = model.fit(trainX, trainY, epochs = 10)
  Models.append(model)

  model = models.Sequential([
        layers.ZeroPadding2D(padding=(1,1), input_shape=(8, 8, 14)),
        layers.Conv2D(32, (3, 3), strides = (1,1), activation='relu'),
        layers.ZeroPadding2D(padding=(1,1)),
        layers.MaxPooling2D((2, 2)),
        layers.ZeroPadding2D(padding=(1,1)),
        layers.Conv2D(64, (3, 3), activation='relu'),
        layers.Flatten(),
        layers.Dense(128,activation='softmax'),
        layers.Reshape((1,128))
  ])
 
  print("Training Model 12:")
  model.compile(optimizer='Nadam',
                loss = tf.keras.losses.MeanSquaredError(),
                metrics=['accuracy'])
  
  history = model.fit(trainX, trainY, epochs = 10)
  Models.append(model)

  print("Training Model 13:")
  model.compile(optimizer='Nadam',
                loss = tf.keras.losses.MeanSquaredLogarithmicError(),
                metrics=['accuracy'])
  
  history = model.fit(trainX, trainY, epochs = 10)
  Models.append(model)

  model = models.Sequential([
         layers.ZeroPadding2D(padding=(1,1), input_shape=(8, 8, 14)),
         layers.Conv2D(32, (3, 3), strides = (1,1), activation='relu'),
         layers.ZeroPadding2D(padding=(1,1)),
         layers.MaxPooling2D((2, 2)),
         layers.ZeroPadding2D(padding=(1,1)),
         layers.Conv2D(64, (3, 3), activation='relu'),
         layers.ZeroPadding2D(padding=(1,1)),
         layers.MaxPooling2D((2, 2)),
         layers.ZeroPadding2D(padding=(1,1)),
         layers.Conv2D(64, (3, 3), activation='relu'),
         layers.ZeroPadding2D(padding=(1,1)),
         layers.MaxPooling2D((2, 2)),
         layers.ZeroPadding2D(padding=(1,1)),
         layers.Conv2D(64, (3, 3), activation='relu'),
         layers.Flatten(),
         layers.Dense(128,activation='softmax'),
         layers.Reshape((1,128))
  ])

  print("Training Model 14:")
  model.compile(optimizer='Nadam',
                loss = tf.keras.losses.MeanSquaredLogarithmicError(),
                metrics=['accuracy'])
  
  history = model.fit(trainX, trainY, epochs = 20)
  Models.append(model)

  model = models.Sequential([
         layers.ZeroPadding2D(padding=(1,1), input_shape=(8, 8, 14)),
         layers.Conv2D(32, (3, 3), strides = (1,1), activation='elu'),
         layers.ZeroPadding2D(padding=(1,1)),
         layers.MaxPooling2D((2, 2)),
         layers.ZeroPadding2D(padding=(1,1)),
         layers.Conv2D(64, (3, 3), activation='elu'),
         layers.ZeroPadding2D(padding=(1,1)),
         layers.MaxPooling2D((2, 2)),
         layers.ZeroPadding2D(padding=(1,1)),
         layers.Conv2D(64, (3, 3), activation='elu'),
         layers.ZeroPadding2D(padding=(1,1)),
         layers.MaxPooling2D((2, 2)),
         layers.ZeroPadding2D(padding=(1,1)),
         layers.Conv2D(64, (3, 3), activation='elu'),
         layers.Flatten(),
         layers.Dense(128,activation='softmax'),
         layers.Reshape((1,128))
  ])

  print("Training Model 15:")
  model.compile(optimizer='adam',
                loss = tf.keras.losses.MeanSquaredLogarithmicError(),
                metrics=['accuracy'])
  
  history = model.fit(trainX, trainY, epochs = 10)
  Models.append(model)

  if isWhite:
    if os.path.exists("/content/White Weights") is False:
      os.mkdir('White Weights')
    path = "WModel"
    for i in range(15):
      Models[i].save("/content/White Weights/"+path+str(i)+".h5")
  else:
    if os.path.exists("/content/Black Weights") is False:
      os.mkdir('Black Weights')
    path = "BModel"
    for i in range(15):
      Models[i].save("/content/Black Weights/"+path+str(i)+".h5")
  return models