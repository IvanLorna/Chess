# -*- coding: utf-8 -*-
"""AI_class.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19808imAEAdHna9zpJkeknI-Okk3-2cJ4
"""

import os
import chess
import numpy as np
from Agent import Agent

class Environement():
  def __init__(self, White, Black):
    self.board = chess.Board()
    self.numTurns = 0
    self.DecisiveMove = None
    self.White = White
    self.Black = Black
    self.Turn = "White"
    self.Winner = None
    self.history = []

  def Game(self):
    while self.board.is_checkmate() is False:
      if self.board.is_stalemate() is True or self.numTurns > 1500:
        print("There is a stalemate")
        return self.history
      if self.Turn is "White":
        move = White.MakeMove(self.board)
        self.history.append(move)
        self.board.push_uci(move)
        if self.board.is_checkmate() is True:
          self.Winner = "White"
          self.DecisiveMove = move
        self.Turn = "Black"
      else:
        move = Black.MakeMove(self.board)
        self.history.append(move)
        self.board.push_uci(move)
        if self.board.is_checkmate() is True:
          self.Winner = "Black"
          self.DecisiveMove = move
        self.Turn = "White"
      self.numTurns += 1
    print("The Winner is:",self.Winner)
    print("Decisive Move:",self.DecisiveMove)
    return self.history